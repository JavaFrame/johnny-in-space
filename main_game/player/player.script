go.property("max_fire_intervall", 2)
go.property("min_fire_intervall", 0.3)

-- the max angle when banking
go.property("max_bank_angle", 30)
-- px per second drift
go.property("max_bank_drift", 150)

-- the max damage level
go.property("max_damage_level", 2)

-- every x point something on the ship (blaster or engine) will recieve damage
go.property("damage_ratio", 3)

-- the properties of the ship, which can be damaged
local DAMAGABLE_TRANSLATION = {left_jet_damage = "left engine", right_jet_damage = "right engine", left_blaster_damage = "left blaster", right_blaster_damage = "right blaster"}

local WIDTH = 1270

function init(self)
	-- set seed
	math.randomseed(socket.gettime())

	msg.post(".", "acquire_input_focus")

	self.input = vmath.vector3()
	self.speed = 400

	-- damage level go from 0 to $max_damage_level where 0 = no damage, $max_damage_level = max damage
	self.ship = {left_jet_damage = 0, right_jet_damage = 0, left_blaster_damage = 0, right_blaster_damage = 0}
	
	self.moving = false
	self.firing = false

	self.last_left_fired = 0
	self.last_right_fired = 0

	self.left_fire_rate = self.min_fire_intervall
	self.right_fire_rate = self.min_fire_intervall

	self.roation = vmath.quat_rotation_z(0)
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	local jet_angle = get_roation_from_blasters(self)
	self.rot = vmath.quat_rotation_z(jet_angle)
	go.set_rotation(self.rot)
	self.drift = get_drift_from_blasters(self)

	local pos = go.get_position()
	pos.x = pos.x + self.drift * dt
	if self.moving then
		pos = pos + self.input * self.speed * dt
	end
	if pos.x < 0 then
		pos.x = 0
	elseif pos.x > WIDTH then
		pos.x = WIDTH
	end
	go.set_position(pos)



	local current = socket.gettime()
	if self.firing then 
		if current - self.last_left_fired > self.left_fire_rate then
			fire(self, true)
		end
		if current - self.last_right_fired > self.right_fire_rate then
			fire(self, false)
		end
	end

	self.moving = false
	
	self.input.x = 0
	self.input.y = 0
end

function on_message(self, message_id, message, sender)
	if message_id == hash("damage") then
		-- if the lives is devideable through damage_ratio
		if message.lives % self.damage_ratio == 0 then
			local toDamageProperty = nil
			local max_tries = self.max_damage_level * table_length(self.ship)
			local tries = 0
			repeat
				tries = tries + 1
				local rand = math.random(1, table_length(self.ship))
				local i = 1
				for key, value in pairs(self.ship) do
					if i == rand and value < self.max_damage_level then
						toDamageProperty = key
					end
					i = i + 1
				end
			until toDamageProperty ~= nil or tries > max_tries

			if toDamageProperty ~= nil then
				self.ship[toDamageProperty] = self.ship[toDamageProperty] + 1
				pprint("damage " .. toDamageProperty .. " to " .. self.ship[toDamageProperty])
				msg.post("/gui#main", "notify", { text = "Your " .. DAMAGABLE_TRANSLATION[toDamageProperty] .. " was damaged" })
			else 
				print("no property to damage found, all are over the max_damage_level of " .. self.max_damage_level, self.ship)
			end

			msg.post("/gui#main", "ship_damage", { ship = self.ship, lives = message.lives, max_lives = message.max_lives })

			-- calculate new fire rates
			self.left_fire_rate = get_fire_rate(self, self.ship.left_blaster_damage)
			self.right_fire_rate = get_fire_rate(self, self.ship.right_blaster_damage)

		end
		msg.post("/gui#main", "lives", { lives = message.lives , max_lives = message.max_lives})

		if message.lives == 0 then
			msg.post("/gui#main", "gameover")
		end
	end
end

function table_length(table_obj) 
	local count = 0
	for _ in pairs(table_obj) do
		count = count + 1
	end
	return count
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	elseif action_id == hash("fire") and action.pressed then
		self.firing = true
	elseif action_id == hash("fire") and action.released then
		self.firing = false
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
	end
end

-- fires a shot either from the left or right blaster
function fire(self, left)
	local rot = vmath.quat_rotation_z(90) -- quat which points upwards
	local dir = vmath.rotate(self.rot, vmath.vector3(0, 1, 0))
	local props = { dir = dir }
	local pos = go.get_position()
	if left then
		pos.x = pos.x - 20
	else
		pos.x = pos.x + 20
	end
	pos.y = pos.y + 20
	factory.create("#factory_basic", pos, rot, props, 1)

	local current = socket.gettime()
	if left then
		self.last_left_fired = current
	else 
		self.last_right_fired = current
	end
end

-- calculates the fire rate for a blaster with the given damage level
function get_fire_rate(self, damage_level)
	local rate = (damage_level / (self.max_fire_intervall - self.min_fire_intervall)) + self.min_fire_intervall
	pprint("rate: " .. rate .. ", damage_level: " .. damage_level)
	return rate
end

function get_roation_from_blasters(self)
	-- banks to left: diff smaller than zero
	-- banks to right: diff greater than zero
	local diff = math.abs(self.ship.right_jet_damage - self.ship.left_jet_damage)
	return diff / self.max_damage_level * (self.max_bank_angle / 180 * math.pi)
end

function get_drift_from_blasters(self) 

	-- banks to left: diff smaller than zero
	-- banks to right: diff greater than zero
	local diff = (self.ship.right_jet_damage - self.ship.left_jet_damage)
	return diff / self.max_damage_level * self.max_bank_drift 
end
